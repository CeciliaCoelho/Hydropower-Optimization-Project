%% fmincon: goal to maximize the power generated by the turbine flow

rng(1);
v = randi([6,20],1,50);
Vi = 50e6;
Q_in = randi([100,1000],1,50); % inflow
t = 3600;

for i = 1:50
    x0 = [0];
    A = [];
    B = [];
    Aeq = [];
    Beq = [];
    LB = [0];
    UB = [3];
    


    [x(i),fval(i),exitflag(i),output(i)] = fmincon(@(x)func_ver2_1obj(x,i),x0,A,B,Aeq,Beq,LB,UB,@(x)rest_ver2_1obj(x,i,Vi));
    
     Vi = Vi + t*(Q_in(i) - pi*v(i)*x(1)^2);
     
    if Vi >= 55e6
        fprintf('The dam just collapsed! RUN!!!')
    end
end

scatter(x,-fval)

% n = 0.75; %efficiency
% p = 998; %density of water
% g = 9.81;
% h = 110; %head
% fplot(@(x) (-(n * p * g * h * pi * 6 * x^2)));

%% multiobjective genetic algorithm: goal to maximize the power generated by the turbine flow and minimize the spill flow

rng(1);
v = randi([6,20],1,50);
Vi = 50e6;
Q_in = randi([100,1000],1,50); % inflow
t = 3600;
j = 0;
for i = 1:50
    
    x0 = [0;0];
    A = [];
    B = [];
    Aeq = [];
    Beq = [];
    LB = [0;0];
    UB = [3;5];

    op = optimoptions(@gamultiobj);
    op = optimoptions(op,'PopulationSize',100,'MaxStallGenerations',500,'MaxGenerations',1000);
    [x,fval,exitflag,output,population] = gamultiobj(@(x)func_ver2(x,i),2,A,B,Aeq,Beq,LB,UB,@(x)rest_ver2(x,i,Vi),op);
    
    Vi = Vi + t*(Q_in(i) - pi*v(i)*x(1)^2 -pi*v(i)*x(2)^2);
    
    if Vi >= 55e6
        fprintf('The dam just collapsed! RUN!!!')
    end
    
end

%% fminsearch: goal to maximize the power generated by the turbine flow. no constraints

%Remark: no finite solution!!!

x0 = [0];
rng(1);
v = randi([6,20],1,50);
Vi = 50e6;
Q_in = randi([100,1000],1,50); % inflow
t = 3600;

for i = 1:50
    op = optimset('MaxFunEvals',10000,'MaxIter',10000);%,'PlotFcns',@optimplotfval);
    [x,fval,exitflag,output] = fminsearch(@(x)func_ver2_1obj(x,i),x0,op);
    
    Vi = Vi + t*(Q_in(i) - pi*v(i)*x(1)^2);
     
    if Vi >= 55e6
        fprintf('The dam just collapsed! RUN!!!')
    end
end

%% patternsearch: goal to maximize the power generated by the turbine flow. 

%Remark: for this algortihm to find feasible points in more runs, the max
%reservoir storage constraint must be removed

rng(1);
v = randi([6,20],1,50);
Vi = 50e6;
Q_in = randi([100,1000],1,50); % inflow
t = 3600;

x0 = [0];
A = [];
B = [];
Aeq = [];
Beq = [];
LB = [0];
UB = [3];

for i = 1:50
    [x(i),fval(i),exitflag(i),output(i)] = patternsearch(@(x)func_ver2_1obj(x,i),x0,A,B,Aeq,Beq,LB,UB,@(x)rest_ver2_1obj(x,i,Vi));
    
    Vi = Vi + t*(Q_in(i) - pi*v(i)*x(1)^2);
    
    
    if Vi >= 55e6
        fprintf('The dam just collapsed! RUN!!!')
    end
end

%% PSwarm

rng(1);
v = randi([6,20],1,50);
Vi = 50e6;
Q_in = randi([100,1000],1,50); % inflow
t = 3600;

LB = [0];
UB = [3];

for i = 1:50
    op = optimoptions('particleswarm','SwarmSize',300,'HybridFcn',@fmincon,'MaxStallIterations',500,'MaxIterations',1000);
    [x(i),fval(i),exitflag(i),output(i)] = particleswarm(@(x)func_ver2_1obj(x,i),1,LB,UB,op);
 
    Vi = Vi + t*(Q_in(i) - pi*v(i)*x(1)^2);

    
end

scatter(x,-fval,'filled')
hold on
scatter(x,Q_in(1:50),'filled')



%% genetic algorithm: goal to maximize the power generated by the turbine flow

%Remark: for this algortihm to find feasible points in more runs, the max
%reservoir storage constraint must be removed

rng(1);
v = randi([6,20],1,50);
Vi = 50e6;
Q_in = randi([100,1000],1,50); % inflow
t = 3600;

for i = 1:50
    
    x0 = [0];
    A = [];
    B = [];
    Aeq = [];
    Beq = [];
    LB = [0];
    UB = [3];

    op = optimoptions(@ga);
    op = optimoptions(op,'PopulationSize',100);
    [x,fval,exitflag,output,population] = ga(@(x)func_ver2_1obj(x,i),1,A,B,Aeq,Beq,LB,UB,@(x)rest_ver2_1obj(x,i,Vi));
    
    x;
    exitflag
    Vi = Vi + t*(Q_in(i) - pi*v(i)*x(1)^2);
    
    if Vi >= 55e6
        fprintf('The dam just collapsed! RUN!!!')
    end
   
end